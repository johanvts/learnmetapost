---
title: "Variables and Equations"
date: 2021-03-28T23:15:26+02:00
draft: true
---
* Variables and equations
** Variables

MetaPost uses 10 different types of variables. Here we will have a look at the tree most used
1. numric
2. pair
3. and path. These make up the building blocks of most metapost figures.

- A numeric is simply a floating point number. We can declare and initalize a numeric like so 

> numeric a;
> a:=4.0;

For numerics we can actually skip the declaration as Metapost will automatically create a numeric when we assign a value to it. 

- A pair is simply a touple containig two numerics. Pairs are hugely usefull as they describe positions in the 2d coordinate system
that is out main reference for locating things in metapost. Lets declared two points A and B like so:

> pair A,B;

once decalred we can initialize A and B. 

> A := (1,1);
> B := (2,2);

- Finally, a path can be defined by a combination of pairs, and instructions for connecting those pairs.
A basic connection instruction is the "--" operator, which says to connect pairs using straight lines. Given pairs A, and B we
can define a straight line l by writing

> path l;
> l := A--B;

Metapost can draw paths using the draw command:

> draw l;

Sometimes we want to declare a collection of variables. We can do that by writing

> pair A[];

A is now an array of pairs, we can address them by suffixing A with a number:

> A0 := (1,1);
> A1 := (2,2);

By default Metapost declares variables x and y as arrays of numerics and z(suffix) as the tuple (x(suffix),y(suffix).
We can use this to replace our code with

> z1 := (1,1);
> z2 := (2,2);
> path l;
> l:= z1--z2;
> draw l:

** Equations

Metapost differs from many other languages in that it does not use = to assign values to variables, instead it uses the assignment operator :=
In the last section we made heavy use of the assignment operator :=.
Lets look at that code again.

Recall that z1 is simply shorthand for (x1,y1). So we would expect x1 and y2 to hold the values 1 and 2, which we can inspect using the show command:

> show x1, y2;

The = operator instead is used just as it is in mathematics, to declare that the right and left hand sides are equal.
Whenever we write = we are specifying equations, and metapost will try to resolve them.
So if I now issue:

> x1 = 2;

You will see that I get an "inconsistent equation", since metapost cannot resolve 1=2.
The build-in equation solver is hugely powerfull for drawing figures of mathematical concepts without having to assign absolute positions.
Lets draw a right triangle in this way. The triangle consists of three points, connected by straight lines, and at the point C I want a right angle.

> pair A,B,C;
> B = C + (0,1);
> A = C - (1,0);

Now we just need to anchor C somewhere on our coordinate system.

> C:=origin;

And we can draw the triangle

> draw A--B--C--cycle;

here I used the special cycle to point back to the beginning of the path.

Metapost can handle much more complicated linear equations, also involving pairs.
Lets draw a simple X.

> z1=-z2=(1,1);
> z3=-z4=(-1,1);
> draw z1--z2, z3--z4;

Recall that z is a reserved varialbe for storing paris. You will notice how we used equality with the fact that "-" mirrors values around 0.

Next we will use the special syntax "fraction[pair1,pair2]" to find the place where the two lines cross.
This syntax yields the pair at "fraction" of the way along a straight line from pair1 to pair2.
In this simple case we know that the paths intersect at 1/2[z1,z3], but we can use the equation solver to find
the answer (1/2) as well. Since we don't really need to store that fraction, but just the coordinats of the point,
we will use the special keyword "whatever" to denote an anonumus variable. That was a lot of information, but I think
you will find it quite intuitive to use:

We write

> z5 = whatever[z1,z2];
 
which simply says that z5 is equal to some point on the line between z1 and z2.
If we add the equation:

> z5 = whatever[z3,z4];

there is suddenly only one solution, we can draw it out using the command 'dotlabel', which is like 'label' that we used in the hello world example, but with a dot marking the location
of the label.

> dotlabel("z5 solution",z5);

If we want to find intersections between more complicated not-straight paths we can use the "(path) intersectionpoint (path)" command.

** Exercise

Use what you have seen to draw the following figure:

You can use |lft|rt|top|bot|ulft|urt|llft|lrt to control the relative location of a label like so:

dotlabel.rt("rt",origin);

> thirds_box.mp


