---
title: "For loops"
date: 2021-03-28T23:15:51+02:00
draft: false
---

For loops are great for handling repetitive elements in figures.
MetaPost supports simple for loops over integers like this:

#+BEGIN_SRC
for i:=0 upto 10:
	dotlabel("",(i,0));
endfor	
#+END_SRC

{{< figure src="/images/loop_1.png" title="dot dot dot" >}}

the =upto= form is shorthand for the full for loop syntax:

#+BEGIN_SRC
 for i:0 step 1 until 10:
#+END_SRC

This full version allows us to change the step size, but most of the time stepsize =1= is fine so =upto= comes in handy.
For loops are also great for drawing functions, essentially by sampling our function at each step.
As a start, lets call the =uniformdeviate= function for some uniformly distributed noise:

{{< figure src="/images/loop_2.png" title="step dependent noise." >}}

#+BEGIN_SRC
for i:=0 upto 10:
	dotlabel("",(i,uniformdeviate(i*2)));
endfor;
#+END_SRC

But for a function we really want a smooth path through these points.
Remember that paths start AND end with a pair. So we can do something like:

#+BEGIN_SRC
for i:=0 upto 10:
	draw (i,uniformdeviate(i*2))..(i+1,uniformdeviate(i*2));
endfor;
#+END_SRC

Essentially drawing each segment of the function.
However the random noise makes the segments become disjointed.

{{< figure src="/images/loop_3.png" title="Segmented paths." >}}

Fortunately MetaPost has a solution to this problem, for-loops can be embedded into path definitions.
So we can draw the image like this:

#+BEGIN_SRC
  draw ( (0,uniformdeviate(0))
    for i:=1 upto 10:
    -- (i*u,uniformdeviate(u*i*2)) endfor);
#+END_SRC

{{< figure src="/images/loop_4.png" title="One path." >}}

* Exercises

Another way of dealing with the segmented paths when drawing functions with randomness is to /cache/ the results before drawing them.
Try using two for loops, one to write function values in an array and another to draw line segments based on the array.

{{< figure src="/images/loop_5.png" title="One path using two loops." >}}

For some normal distributed noise you can use =normaldeviate= which does not take any parameters (standard normal distribution).

** Hint

#+BEGIN_SRC
beginfig(5);
  numeric gauss[];
  for i:=1 upto 10:
    gauss[i] := normaldeviate;
  endfor;

  for i:=1 upto 9:
    draw (i*u,gauss[i]*u)..((i+1)*u,gauss[i+1]*u);
  endfor;
endfig;
#+END_SRC
